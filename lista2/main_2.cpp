#include <sstream>
#include <iostream>
#include <iomanip>
#include <array>
#include <vector>
#include <thread>
#include <cstdint>
#include <cassert>
#include <memory>
#include <iterator>
#include <stdexcept>

#include <openssl/evp.h>
#include <openssl/aes.h>
#include <openssl/err.h>

#include "utils.hpp"
#include "CipherCtxHandler.hpp"
#include "Cracker.hpp"

namespace mp = boost::multiprecision;

void task2()
{
    ByteBuffer ciphertext {
      0b01101001, 0b11110100, 0b00110101, 0b11111000, 0b00001110, 0b01011110, 0b01111010, 0b10111000,
      0b01001001, 0b10010010, 0b00011010, 0b11101010, 0b00111110, 0b10100110, 0b10110010, 0b01010101,
      0b00110011, 0b00110100, 0b00011110, 0b01000110, 0b00010100, 0b01000011, 0b01110011, 0b01001000,
      0b11011011, 0b10111010, 0b01100011, 0b01111011, 0b11010100, 0b11010001, 0b10000110, 0b01110011,
      0b01000000, 0b01000001, 0b10111010, 0b11010111, 0b00001000, 0b10010010, 0b00011011, 0b10010100,
      0b10101101, 0b10001111, 0b11101011, 0b10100110, 0b11110000, 0b01011011, 0b00110110, 0b01111110,
      0b00000111, 0b11100101, 0b11011011, 0b11000101, 0b11110001, 0b00100011, 0b00011001, 0b01100001,
      0b11101011, 0b01001001, 0b10001100, 0b10100111, 0b10001100, 0b00101011, 0b11010110, 0b11101110,
      0b11010001, 0b10101110, 0b11011010, 0b01011000, 0b00100111, 0b00111011, 0b01100011, 0b00110101,
      0b01100000, 0b00011001, 0b11101110, 0b11111100, 0b01110110, 0b00011010, 0b11011101, 0b01011001,
      0b10000100, 0b11100011, 0b00101010, 0b11110110, 0b00001101, 0b01010111, 0b01110111, 0b01000100,
      0b00100011, 0b00100101, 0b11111001, 0b11100111, 0b01001110, 0b11000111, 0b00000010, 0b10010001
    };
    Cracker c(
      64,
      "043a769921abd929667aa88ac54f769c826e2374171f57f39868a0a",
      {0x53, 0x7a, 0x23, 0xe3, 0x8d, 0xc3, 0x26, 0x1b, 0x5e, 0x1d, 0x42, 0x0f, 0xf4, 0x26, 0xf5, 0x53});
    auto keys = c.crack(ciphertext);
    for(auto& k : keys)
    {
        std::cout << hex(k) << std::endl;
    }
}

int main()
{
    task2();
}
