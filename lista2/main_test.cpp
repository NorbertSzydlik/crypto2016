#include <string>
#include <cassert>
#include "utils.hpp"
#include "Cracker.hpp"

void test_isCrackerValid()
{
    ByteBuffer cipherText = {
     0b01010001, 0b00110101, 0b10011110, 0b01000000,
     0b01101010, 0b00110010, 0b11100010, 0b00010001,
     0b10111001, 0b01000011, 0b00110000, 0b10000011,
     0b11111010, 0b11010111, 0b00011011, 0b00011110,
     0b00000010, 0b01111001, 0b01010111, 0b10010010,
     0b00110010, 0b00111100, 0b11011001, 0b00101110,
     0b10011001, 0b10100001, 0b01010001, 0b01101110,
     0b01000110, 0b11011111, 0b00011111, 0b11100010,
     0b00110001, 0b11110010, 0b00101011, 0b00101110,
     0b10111111, 0b00010010, 0b01001011, 0b11011000,
     0b11000110, 0b00010001, 0b01101001, 0b10111010,
     0b00110101, 0b00101111, 0b01111001, 0b10101100,
     0b11101001, 0b10100111, 0b10001101, 0b11101001,
     0b00100110, 0b00100100, 0b00011111, 0b10011111,
     0b01111101, 0b00100001, 0b00111001, 0b01110101,
     0b01011100, 0b11100000, 0b01011010, 0b11000000,
     0b10100111, 0b11110011, 0b11010011, 0b10111110,
     0b11101100, 0b01011100, 0b00000101, 0b00100001,
     0b01001010, 0b00101111, 0b01110000, 0b01010111,
     0b01101010, 0b01111110, 0b11101010, 0b11000110,
     0b11110100, 0b00101100, 0b00011110, 0b00100101,
     0b00000100, 0b11011011, 0b11001000, 0b10001100,
     0b10101000, 0b10011000, 0b10110000, 0b01011101,
     0b10011010, 0b10111100, 0b11111101, 0b10011111,
     0b11011001, 0b01001111, 0b10100110, 0b10000111,
     0b00100010, 0b10001010, 0b00011000, 0b10100011,
     0b01110011, 0b01100100, 0b01110000, 0b01101010,
     0b01010011, 0b10111011, 0b00111101, 0b00001000
    };   
    auto iv = Iv("0x848fa0622ac897a781b1fad6e6d6e202");
    Cracker c(64, "1ded9cca17997a7956aec234a8ec2bbbedae026eb3465705c6c1c81075b917", iv);
    auto keys = c.crack(cipherText);
    assert(keys.size() > 0);
    auto key = keys[0];
//std::string decrypt(const ByteBuffer& ciphertext, const Key& keyNum, const
//Iv& ivNum)
    auto plaintext = decrypt(cipherText, key, iv);


}

int main()
{
  test_isCrackerValid();
}
